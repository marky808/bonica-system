"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Progress } from "@/components/ui/progress"
import { FileText, Download, CheckCircle, Clock, AlertCircle, Loader2 } from "lucide-react"
import { apiClient, type Customer } from "@/lib/api"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { useAuth } from "@/lib/auth-context"
import { useRouter } from "next/navigation"

interface MonthlyDeliveryData {
  customerId: string
  customerName: string
  billingCycle: string
  billingDay: number
  paymentTerms: string
  deliveryCount: number
  totalAmount: number
  hasInvoice: boolean
  invoiceId?: string
  deliveryIds: string[]
}

// ÂãïÁöÑ„Å´Êúà„ÅÆ„Ç™„Éó„Ç∑„Éß„É≥„ÇíÁîüÊàê
const generateMonthOptions = () => {
  const options = []
  const now = new Date()
  for (let i = 0; i < 12; i++) {
    const date = new Date(now.getFullYear(), now.getMonth() - i, 1)
    const value = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`
    const label = `${date.getFullYear()}Âπ¥${date.getMonth() + 1}Êúà`
    options.push({ value, label, year: date.getFullYear(), month: date.getMonth() + 1 })
  }
  return options
}

interface InvoiceCreationProps {
  onInvoiceGenerated?: (customerId: string, year: number, month: number) => void
}

export function InvoiceCreation({ onInvoiceGenerated }: InvoiceCreationProps) {
  const { isAuthenticated, isLoading: authLoading } = useAuth()
  const router = useRouter()
  const [selectedMonth, setSelectedMonth] = useState(() => {
    const now = new Date()
    return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`
  })
  const [monthlyData, setMonthlyData] = useState<MonthlyDeliveryData[]>([])
  const [customers, setCustomers] = useState<Customer[]>([])
  const [selectedCustomer, setSelectedCustomer] = useState("all")
  const [generatingInvoices, setGeneratingInvoices] = useState<Set<string>>(new Set())
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')
  const [mounted, setMounted] = useState(false)

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("ja-JP", {
      style: "currency",
      currency: "JPY",
    }).format(amount)
  }

  const months = generateMonthOptions()
  const currentMonthOption = months.find(m => m.value === selectedMonth)
  
  // „Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Åï„Çå„Åü„Éá„Éº„Çø
  const filteredData = selectedCustomer === "all" 
    ? monthlyData 
    : monthlyData.filter(data => data.customerId === selectedCustomer)
  
  
  const totalCustomers = filteredData.length
  const generatedCount = filteredData.filter((data) => data.hasInvoice).length
  const progressPercentage = totalCustomers > 0 ? (generatedCount / totalCustomers) * 100 : 0

  // „Éá„Éº„ÇøÂèñÂæóÈñ¢Êï∞
  const loadMonthlyData = async (year: number, month: number, customerId?: string) => {
    console.log('üöÄ COMPONENT LOADED: InvoiceCreation loadMonthlyData called')
    setLoading(true)
    setError('')
    setSuccess('')
    
    try {
      console.log('üìä InvoiceCreation: Starting loadMonthlyData', { year, month, customerId })
      
      // ÂÆüÈöõ„ÅÆAPI„ÇíÂëº„Å≥Âá∫„Åó
      console.log('üì° InvoiceCreation: Calling API for monthly data')
      const response = await apiClient.request(`/invoices/monthly?year=${year}&month=${month}${customerId && customerId !== 'all' ? `&customerId=${customerId}` : ''}`)
      console.log('üì• InvoiceCreation: Full API response received:', JSON.stringify(response, null, 2))
      
      // „É¨„Çπ„Éù„É≥„ÇπÊßãÈÄ†„Çí„Çà„ÇäË©≥Á¥∞„Å´„É≠„Ç∞Âá∫Âäõ
      console.log('üîç Response structure analysis:')
      console.log('- response.data exists:', !!response.data)
      console.log('- response.data.data exists:', !!(response.data && response.data.data))
      console.log('- response.data.summaries exists:', !!(response.data && response.data.summaries))
      console.log('- response.data.data.summaries exists:', !!(response.data && response.data.data && response.data.data.summaries))
      console.log('- response.error:', response.error)

      // API„É¨„Çπ„Éù„É≥„Çπ„ÅÆÊßãÈÄ†„Å´Âü∫„Å•„ÅÑ„Å¶Ê≠£„Åó„Åè„Ç¢„ÇØ„Çª„Çπ
      let summaries = null;
      if (response.data && response.data.data && response.data.data.summaries) {
        summaries = response.data.data.summaries;
        console.log('‚úÖ Found summaries at response.data.data.summaries:', summaries.length, 'items')
      } else if (response.data && response.data.summaries) {
        summaries = response.data.summaries;
        console.log('‚úÖ Found summaries at response.data.summaries:', summaries.length, 'items')
      }

      if (summaries && summaries.length > 0) {
        console.log('üìù InvoiceCreation: Setting monthly data with summaries:', summaries)
        setMonthlyData(summaries)
        setSuccess(`${year}Âπ¥${month}Êúà„ÅÆ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„ÅüÔºà${summaries.length}È°ßÂÆ¢Ôºâ`)
      } else {
        console.log('‚ö†Ô∏è InvoiceCreation: No summaries found in response')
        // Ë™çË®º„Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØÁâπÂà•„Å´Âá¶ÁêÜ
        if (response.error?.includes('Authentication') || response.error?.includes('401')) {
          setError('Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
          console.error('Ë™çË®º„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇAPI„Ç≥„Éº„É´„ÇíÂÅúÊ≠¢„Åó„Åæ„Åô„ÄÇ')
          return // „Åì„Åì„Åßreturn„Åó„Å¶ÂÜçÂ∫¶„ÅÆÂëº„Å≥Âá∫„Åó„ÇíÈò≤„Åê
        } else if (summaries && summaries.length === 0) {
          setError(`${year}Âπ¥${month}Êúà„ÅÆÁ¥çÂìÅÂÆüÁ∏æ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì`)
          setMonthlyData([])
        } else {
          setError(response.error || 'ÊúàÊ¨°„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
          setMonthlyData([])
        }
      }
    } catch (err: any) {
      console.error('InvoiceCreation: loadMonthlyData error:', err)
      // Ë™çË®º„Ç®„É©„Éº„Åã„ÉÅ„Çß„ÉÉ„ÇØ
      if (err.message?.includes('401') || err.message?.includes('Authentication')) {
        setError('Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
        router.push('/login')
      } else {
        setError('ÈÄö‰ø°„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü')
      }
      setMonthlyData([])
    } finally {
      setLoading(false)
    }
  }

  // Mount detection effect
  useEffect(() => {
    console.log('üöÄ InvoiceCreation component mounted!')
    setMounted(true)
  }, [])

  // Authentication redirect effect
  useEffect(() => {
    if (mounted && !authLoading && !isAuthenticated) {
      router.push('/login')
    }
  }, [mounted, authLoading, isAuthenticated, router])

  // È°ßÂÆ¢„Éá„Éº„ÇøÂèñÂæó
  useEffect(() => {
    // Client-side only: ensure this runs after hydration and mounting and user is authenticated
    if (mounted && isAuthenticated && !authLoading) {
      const loadCustomers = async () => {
        try {
          console.log('üë• InvoiceCreation: Loading customers on client-side')
          const response = await apiClient.getCustomers()
          if (response.data) {
            setCustomers(response.data)
          }
        } catch (err) {
          console.error('Failed to load customers:', err)
        }
      }
      loadCustomers()
    }
  }, [mounted, isAuthenticated, authLoading])

  // Manual data loading prevents infinite loops
  // Auto-loading is disabled to prevent infinite loops
  // Users must manually click the "„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø" button to load monthly data

  const handleGenerateInvoice = async (customerId: string) => {
    if (!currentMonthOption) return
    
    setGeneratingInvoices((prev) => new Set([...prev, customerId]))
    setError('')

    try {
      // apiClient„Çí‰ΩøÁî®„Åó„Å¶Ë™çË®º„Éò„ÉÉ„ÉÄ„Éº„ÇíÂê´„ÇÅ„Çã
      const response = await apiClient.request('/invoices/monthly', {
        method: 'POST',
        body: JSON.stringify({
          customerId,
          year: currentMonthOption.year,
          month: currentMonthOption.month
        })
      })

      if (response.data) {
        const customer = filteredData.find(d => d.customerId === customerId)
        alert(`${customer?.customerName}„ÅÆË´ãÊ±ÇÊõ∏„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü\nË´ãÊ±ÇÊõ∏ID: ${response.data.invoiceId}\nÂêàË®àÈáëÈ°ç: ${formatCurrency(response.data.totalAmount)}`)
        
        // „Éá„Éº„Çø„ÇíÂÜçÂèñÂæó„Åó„Å¶UI„ÇíÊõ¥Êñ∞
        await loadMonthlyData(currentMonthOption.year, currentMonthOption.month, selectedCustomer)
        
        onInvoiceGenerated?.(customerId, currentMonthOption.year, currentMonthOption.month)
      } else {
        setError(response.error || 'Ë´ãÊ±ÇÊõ∏„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
      }
    } catch (err) {
      setError('ÈÄö‰ø°„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü')
    } finally {
      setGeneratingInvoices((prev) => {
        const newSet = new Set(prev)
        newSet.delete(customerId)
        return newSet
      })
    }
  }

  const handleBulkGenerate = async () => {
    const pendingCustomers = filteredData.filter((data) => !data.hasInvoice).map((data) => data.customerId)

    for (const customerId of pendingCustomers) {
      await handleGenerateInvoice(customerId)
    }
  }

  const getTotalAmount = () => {
    return filteredData.reduce((total, data) => total + data.totalAmount, 0)
  }

  const getBillingCycleLabel = (cycle: string) => {
    switch (cycle) {
      case 'monthly': return 'ÊúàÊ¨°'
      case 'weekly': return 'ÈÄ±Ê¨°'  
      case 'immediate': return 'ÈÉΩÂ∫¶'
      default: return cycle
    }
  }

  const getPaymentTermsLabel = (terms: string) => {
    switch (terms) {
      case 'immediate': return 'Âç≥Èáë'
      case '7days': return '7Êó•Âæå'
      case '15days': return '15Êó•Âæå' 
      case '30days': return '30Êó•Âæå'
      case '60days': return '60Êó•Âæå'
      case 'endofmonth': return 'ÊúàÊú´Á∑†ÁøåÊúàÊú´Êâï'
      default: return terms
    }
  }

  // Prevent SSR hydration issues and handle authentication
  if (!mounted || authLoading) {
    return (
      <div className="space-y-6">
        <Card>
          <CardContent className="text-center py-12">
            <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
            <p className="text-muted-foreground">„Ç∑„Çπ„ÉÜ„É†„ÇíÂàùÊúüÂåñ„Åó„Å¶„ÅÑ„Åæ„Åô...</p>
          </CardContent>
        </Card>
      </div>
    )
  }

  // Show login prompt if not authenticated
  if (!isAuthenticated) {
    return (
      <div className="space-y-6">
        <Card>
          <CardContent className="text-center py-12">
            <AlertCircle className="h-12 w-12 text-yellow-500 mx-auto mb-4" />
            <h3 className="text-lg font-medium mb-2">Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô</h3>
            <p className="text-muted-foreground mb-4">
              Ë´ãÊ±ÇÊõ∏‰ΩúÊàêÊ©üËÉΩ„Çí‰ΩøÁî®„Åô„Çã„Å´„ÅØ„ÄÅ„Åæ„Åö„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            </p>
            <Button onClick={() => router.push('/login')}>
              „É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„Å∏
            </Button>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {error && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {success && (
        <Alert className="border-green-200 bg-green-50 text-green-800">
          <CheckCircle className="h-4 w-4" />
          <AlertDescription>{success}</AlertDescription>
        </Alert>
      )}

      {/* ÊúàÈÅ∏Êäû„Å®Ê¶ÇË¶Å */}
      <Card>
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-balance">Ë´ãÊ±ÇÊõ∏‰ΩúÊàê</CardTitle>
          <CardDescription className="text-pretty">ÊúàÊ¨°„ÅÆÁ¥çÂìÅÂÆüÁ∏æ„Åã„ÇâË´ãÊ±ÇÊõ∏„Çí‰ΩúÊàê„Åó„Åæ„Åô</CardDescription>
        </CardHeader>
        <CardContent>
          {/* Manual data loading button */}
          <div className="mb-6">
            <Button 
              onClick={() => {
                console.log('üî• Button clicked! currentMonthOption:', currentMonthOption)
                if (currentMonthOption) {
                  console.log('üî• About to call loadMonthlyData with:', {
                    year: currentMonthOption.year,
                    month: currentMonthOption.month,
                    selectedCustomer
                  })
                  loadMonthlyData(currentMonthOption.year, currentMonthOption.month, selectedCustomer)
                } else {
                  console.log('‚ùå currentMonthOption is null/undefined')
                }
              }}
              disabled={loading || !currentMonthOption}
              className="w-full h-12"
              variant="outline"
            >
              {loading ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  ÊúàÊ¨°„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...
                </>
              ) : (
                <>
                  <Download className="h-4 w-4 mr-2" />
                  {monthlyData.length > 0 ? '„Éá„Éº„Çø„ÇíÂÜçË™≠„ÅøËæº„Åø' : `${currentMonthOption?.label} „ÅÆ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø`}
                </>
              )}
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <label className="text-sm font-medium mb-2 block">ÂØæË±°Êúà„ÇíÈÅ∏Êäû</label>
              <Select value={selectedMonth} onValueChange={(value) => {
                setSelectedMonth(value)
                setSuccess('')
                setError('')
              }}>
                <SelectTrigger className="h-12">
                  <SelectValue placeholder="Êúà„ÇíÈÅ∏Êäû" />
                </SelectTrigger>
                <SelectContent>
                  {months.map((month) => (
                    <SelectItem key={month.value} value={month.value}>
                      {month.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium mb-2 block">È°ßÂÆ¢„Åß„Éï„Ç£„É´„Çø</label>
              <Select value={selectedCustomer} onValueChange={(value) => {
                setSelectedCustomer(value)
                setSuccess('')
                setError('')
              }}>
                <SelectTrigger className="h-12">
                  <SelectValue placeholder="È°ßÂÆ¢„ÇíÈÅ∏Êäû" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">ÂÖ®È°ßÂÆ¢</SelectItem>
                  {customers.map((customer) => (
                    <SelectItem key={customer.id} value={customer.id}>
                      {customer.companyName}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-4">
              <div>
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm font-medium">ÈÄ≤Ë°åÁä∂Ê≥Å</span>
                  <span className="text-sm text-muted-foreground">
                    {generatedCount} / {totalCustomers} ÂÆå‰∫Ü
                  </span>
                </div>
                <Progress value={progressPercentage} className="h-2" />
              </div>

              {totalCustomers > 0 && generatedCount < totalCustomers && (
                <Button onClick={handleBulkGenerate} className="w-full h-12">
                  <FileText className="h-4 w-4 mr-2" />
                  Êú™‰ΩúÊàê„ÅÆË´ãÊ±ÇÊõ∏„Çí‰∏ÄÊã¨ÁîüÊàê
                </Button>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* ÊúàÊ¨°ÈõÜË®àÊÉÖÂ†± */}
      {!loading && filteredData.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>{currentMonthOption?.label} ÈõÜË®àÊÉÖÂ†±</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div className="text-center">
                <div className="text-2xl font-bold text-primary">{totalCustomers}Á§æ</div>
                <div className="text-sm text-muted-foreground">Á¥çÂìÅÂÖàÊï∞</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-accent">{formatCurrency(getTotalAmount())}</div>
                <div className="text-sm text-muted-foreground">ÂêàË®àÁ¥çÂìÅÈáëÈ°ç</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-secondary">
                  {filteredData.reduce((total, data) => total + data.deliveryCount, 0)}‰ª∂
                </div>
                <div className="text-sm text-muted-foreground">Á∑èÁ¥çÂìÅ‰ª∂Êï∞</div>
              </div>
            </div>

            {/* Á¥çÂìÅÂÖàÂà•‰∏ÄË¶ß */}
            <div className="rounded-md border overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Á¥çÂìÅÂÖà</TableHead>
                    <TableHead>Ë´ãÊ±ÇË®≠ÂÆö</TableHead>
                    <TableHead>Á¥çÂìÅ‰ª∂Êï∞</TableHead>
                    <TableHead>ÂêàË®àÈáëÈ°ç</TableHead>
                    <TableHead>„Çπ„ÉÜ„Éº„Çø„Çπ</TableHead>
                    <TableHead>„Ç¢„ÇØ„Ç∑„Éß„É≥</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredData.map((data) => (
                    <TableRow key={data.customerId}>
                      <TableCell className="font-medium">{data.customerName}</TableCell>
                      <TableCell>
                        <div className="text-sm space-y-1">
                          <div>{getBillingCycleLabel(data.billingCycle)}</div>
                          <div className="text-muted-foreground">
                            {data.billingDay}Êó•Á∑†„ÇÅ / {getPaymentTermsLabel(data.paymentTerms)}
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>{data.deliveryCount}‰ª∂</TableCell>
                      <TableCell>{formatCurrency(data.totalAmount)}</TableCell>
                      <TableCell>
                        {data.hasInvoice ? (
                          <Badge className="bg-primary">
                            <CheckCircle className="h-3 w-3 mr-1" />
                            ‰ΩúÊàêÊ∏à„Åø
                          </Badge>
                        ) : (
                          <Badge variant="outline">
                            <Clock className="h-3 w-3 mr-1" />
                            Êú™‰ΩúÊàê
                          </Badge>
                        )}
                      </TableCell>
                      <TableCell>
                        {data.hasInvoice ? (
                          <Button variant="outline" size="sm" disabled>
                            <Download className="h-4 w-4 mr-2" />
                            ‰ΩúÊàêÊ∏à„Åø
                          </Button>
                        ) : (
                          <Button
                            size="sm"
                            onClick={() => handleGenerateInvoice(data.customerId)}
                            disabled={generatingInvoices.has(data.customerId)}
                          >
                            {generatingInvoices.has(data.customerId) ? (
                              <>
                                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                                ÁîüÊàê‰∏≠...
                              </>
                            ) : (
                              <>
                                <FileText className="h-4 w-4 mr-2" />
                                Ë´ãÊ±ÇÊõ∏‰ΩúÊàê
                              </>
                            )}
                          </Button>
                        )}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>
      )}

      {/* „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã */}
      {loading && (
        <Card>
          <CardContent className="text-center py-12">
            <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
            <p className="text-muted-foreground">ÊúàÊ¨°„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Çì„Åß„ÅÑ„Åæ„Åô...</p>
          </CardContent>
        </Card>
      )}

      {/* „Éá„Éº„Çø„Åå„Å™„ÅÑÂ†¥Âêà */}
      {!loading && filteredData.length === 0 && (
        <Card>
          <CardContent className="text-center py-12">
            <FileText className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-medium mb-2">Á¥çÂìÅÂÆüÁ∏æ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</h3>
            <p className="text-muted-foreground">
              {currentMonthOption?.label}„ÅÆÁ¥çÂìÅÂÆüÁ∏æ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
